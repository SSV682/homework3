# Default values for userservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ssv682/user-service
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: #{}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
    prometheus.io/scheme: http
  hosts:
    - host: arch.homework
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
   limits:
     cpu: 100m
     memory: 256Mi
   requests:
     cpu: 100m
     memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  fullnameOverride: postgres
  global:
    postgresql:
      auth:
        postgresPassword: "password"
        password: "password"
        username: "postgres"
        database: "homework"
      service:
        ports:
          postgresql: 5432

authservice:
  host: "userservice-authservice.userservice.svc.cluster.local"
  port: ""
  endpoint: "/api/v1/keys"

redis:
  fullnameOverride: redis
  redisIp: redis-master
  redisPort: 6379
  global:
    redis:
      password: "alicecooper"
  architecture: standalone

zookeeper:
  fullnameOverride: zookeeper
  replicaCount: 1

kafka:
  replicaCount: 1
  externalZookeeper: [ClusterIP-zookeeper:2181]
  provisioning:
    topics:
      - name: order_topic
        partitions: 1
        replicationFactor: 1
      - name: stock_topic
        partitions: 1
        replicationFactor: 1
      - name: delivery_topic
        partitions: 1
        replicationFactor: 1
      - name: billing_topic
        partitions: 1
        replicationFactor: 1
      - name: system_bus
        partitions: 1
        replicationFactor: 1


