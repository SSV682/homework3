apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: userservice-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "arch.homework"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: userservice-vs
spec:
  hosts:
    - "arch.homework"
  gateways:
    - userservice-gateway
  http: # Обратите внимание на порядок маршрутов, маршрут / идет последним, иначе все запросы будут идти именно в него
    - match:
        - uri:
            exact: "/user"
      rewrite:
        uri: "/api/v1/user"
      route:
        - destination:
            port:
              number: 80
            host: userservice.userservice.svc.cluster.local
    - match:
        - uri:
            prefix: "/orders/"
      rewrite:
        uri: "/api/v1/orders/"
      route:
        - destination:
            port:
              number: 80
            host: userservice-orderservice.userservice.svc.cluster.local
    - match:
        - uri:
            prefix: "/orders"
      rewrite:
        uri: "/api/v1/orders"
      route:
        - destination:
            port:
              number: 80
            host: userservice-orderservice.userservice.svc.cluster.local
    - name: "user-whitelisted"
      match:
        - uri:
            exact: "/signup"
      rewrite:
        uri: "/api/v1/signup"
      route:
        - destination:
            port:
              number: 80
            host: userservice.userservice.svc.cluster.local
    - name: "auth-whitelisted" # Указываем имя для применения EnvoyFilter
      match:
        - uri:
            prefix: "/"
      rewrite:
        uri: "/api/v1/"
      route:
        - destination:
            port:
              number: 80
            host: userservice-authservice.userservice.svc.cluster.local

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: userservice-ap
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: ALLOW
  rules:
    - to:
        - operation:
            methods: ["POST"]
            paths: ["/signup*"]
    - to:
      - operation:
          methods: ["POST"]
          paths: [ "/auth*" ]
    - to:
        - operation:
            methods: [ "POST" ]
            paths: [ "/login*" ]
    - to:
        - operation:
            methods: ["GET", "DELETE", "PATCH"]
            paths: ["/user*"]
      when:
        - key: request.auth.claims[iss] # Разрешаем доступ к /user запросам, с JWT токеном внутри которого есть наш издатель
          values: ["http://userservice-authservice.userservice.svc.cluster.local"]
    - to:
        - operation:
            methods: [ "GET", "DELETE", "POST" ]
            paths: [ "/orders*" ]
      when:
        - key: request.auth.claims[iss] # Разрешаем доступ к /orders запросам, с JWT токеном внутри которого есть наш издатель
          values: [ "http://userservice-authservice.userservice.svc.cluster.local" ]
    - from:
        - source:
            requestPrincipals: [ "*" ] # Запрещаем доступ к остальным ресурсам для запросов без JWT
      to:
        - operation:
            notPaths: ["/auth*", "/signup*","/login*", "/user*", '/orders']

---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: userservice-ra
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules: # Включаем фильтр для анализа JWT токена
    - issuer: "http://userservice-authservice.userservice.svc.cluster.local"
      jwksUri: "http://userservice-authservice.userservice.svc.cluster.local/api/v1/keys"
      forwardOriginalToken: true
      outputPayloadToHeader: "x-jwt-token"
      fromHeaders:
        - name: "Authorization"
          prefix: "Bearer "
---